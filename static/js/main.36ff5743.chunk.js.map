{"version":3,"sources":["components/renewal-job-form.module.css","App.module.css","components/renewal-job-types.tsx","components/renewal-job-form.tsx","pages/resume-job.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ScraperMode","ScraperCrossRequest","props","orgId","orgName","lastProgress","lastReviewPage","scrapeMode","this","classFieldName","lastProgressValidateResult","ScraperProgress","validate","Object","keys","lastProgressKey","typeName","key","type","classField","valiateResult","_validate","tokenCacheKey","inputList","name","initialValues","localStorage","getItem","formSubmit","values","a","setSubmitting","fetch","window","location","href","startsWith","URLSearchParams","token","method","headers","body","JSON","stringify","res","status","json","setItem","alert","id","getNestedValueFromName","split","mainField","reduce","acc","cur","RenewalJobForm","className","styles","renewalForm","onSubmit","helpers","onReceiveResponse","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","map","inputMeta","index","field","input","onChange","onBlur","value","submitButton","disabled","ResumeJob","useState","responseDisplay","setResponseDisplay","length","Home","Boolean","hostname","match","ReactDOM","render","App","to","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36ff5743.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"renewalForm\":\"renewal-job-form_renewalForm__2a6rn\",\"field\":\"renewal-job-form_field__V5AVd\",\"input\":\"renewal-job-form_input__37mDi\",\"submitButton\":\"renewal-job-form_submitButton__3OXbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","export enum ScraperMode {\n    REGULAR = 'regular',\n    RENEWAL = 'renewal'\n}\n\nexport interface ScraperCrossRequestData {\n    orgId: string;\n    orgName: string;\n    lastProgress: ScraperProgressData;\n    lastReviewPage: string;\n    scrapeMode: ScraperMode;\n};\n\nexport class ScraperCrossRequest implements ScraperCrossRequestData {\n    public orgId: string;\n    public orgName: string;\n    public lastProgress: ScraperProgressData;\n    public lastReviewPage: string;\n    public scrapeMode: ScraperMode;\n\n    constructor (props: ScraperCrossRequestData) {\n        // ScraperCrossRequest.isScraperCrossRequestData(props);\n\n        this.orgId = props.orgId;\n        this.orgName = props.orgName;\n        this.lastProgress = props.lastProgress;\n        this.lastReviewPage = props.lastReviewPage;\n        this.scrapeMode = props.scrapeMode;\n    }\n\n    // type guard in Typescript\n    // https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\n    public static validate (\n        props: any,\n    ): { [key: string]: string } | void {\n\n        for (const classFieldName of ([\n            'orgId',\n            'orgName',\n            // 'lastProgress', // validate in its own logic later\n            'lastReviewPage',\n            'scrapeMode',\n        ] as Array<keyof ScraperCrossRequestData>)) {\n            if (!props[classFieldName]) {\n                return {\n                    [classFieldName]: 'required'\n                } as { [key in keyof ScraperCrossRequestData]: string };\n            }\n        }\n\n        const lastProgressValidateResult = ScraperProgress.validate(props.lastProgress);\n\n        if (lastProgressValidateResult) {\n            const [lastProgressKey,] = Object.keys(lastProgressValidateResult) as Array<keyof ScraperProgressData>;\n            return {\n                [`lastProgress.${lastProgressKey}`]: lastProgressValidateResult[lastProgressKey]\n            };\n        }\n\n        return;\n    }\n}\n\nexport interface ScraperProgressData {\n    // used in all cases\n    processed: number;\n    wentThrough: number;\n    total: number;\n\n    // used in FINISH and propogate back progress to schedule cross session job\n    durationInMilli: string;\n    page: number;\n    processedSession: number;\n}\n\nexport class ScraperProgress {\n    private static _validate(props: any,  classFieldName: keyof ScraperProgressData, typeName: 'number' | 'string'): { [key in keyof ScraperProgressData]: string } | void {\n        if (typeof props[classFieldName] !== typeName) {\n            return { [classFieldName]: 'required' } as { [key in keyof ScraperProgressData]: string };\n        }\n    }\n\n    public static validate (\n        props: any,\n    ) {\n        for (const classField of ([\n            { key: 'processed', type: 'number' },\n            { key: 'wentThrough', type: 'number' },\n            { key: 'total', type: 'number' },\n            { key: 'durationInMilli', type: 'string' },\n            { key: 'page', type: 'number' },\n            { key: 'processedSession', type: 'number' },\n        ] as Array<{ key: keyof ScraperProgressData, 'type': 'number' | 'string' }>)) {\n            const valiateResult = ScraperProgress._validate(props, classField.key, classField.type);\n\n            if (valiateResult) {\n                return valiateResult;\n            }\n        }\n\n        return;\n    }\n}\n","import React from \"react\";\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { ScraperCrossRequest } from \"./renewal-job-types\";\n\nimport styles from './renewal-job-form.module.css';\n\nconst tokenCacheKey = 'supervisor-scraper-job-queue:renewal-job-form:token';\n\nconst inputList = [\n    { name: 'orgId', type: 'text' },\n    { name: 'orgName', type: 'text' },\n    { name: 'lastProgress.processed', type: 'number' },\n    { name: 'lastProgress.wentThrough', type: 'number' },\n    { name: 'lastProgress.total', type: 'number' },\n    { name: 'lastProgress.durationInMilli', type: 'text' },\n    { name: 'lastProgress.page', type: 'number' },\n    { name: 'lastProgress.processedSession', type: 'number' },\n    { name: 'lastReviewPage', type: 'url' },\n\n    { name: 'token', type: 'text' }\n]\n\nconst initialValues = {\n    'orgId': '1138',\n    'orgName': 'Apple',\n    'lastProgress': {\n        'processed': 4413,\n        'wentThrough': 4610,\n        'total': 15407,\n        'durationInMilli': '5430000',\n        'page': 461,\n        'processedSession': 3\n    },\n    'lastReviewPage': 'https://www.glassdoor.com/Reviews/Apple-Reviews-E1138_P461.htm',\n    'scrapeMode': 'renewal',\n    \n    'token': localStorage.getItem(tokenCacheKey) || ''\n}\n\nconst formSubmit = async (values: typeof initialValues, { setSubmitting }: FormikHelpers<typeof initialValues>) => {\n    const res = await fetch((window.location.href.startsWith('https') ?\n        `https://slack.api.shaungc.com/queues/single-org-renewal-job?` : \n        `http://localhost:55564/queues/single-org-renewal-job?`) + new URLSearchParams({\n        'token': values.token\n    }), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values),\n    });\n\n    if (res.status === 200) {\n        const json = await res.json();\n\n        localStorage.setItem(tokenCacheKey, values.token);\n\n        alert('Submit success! Job number ' + json.id);\n        setSubmitting(false);\n        return json;\n    } else {\n        return res;\n    }\n}\n\nconst getNestedValueFromName = (values: FormikValues, name: string) => {\n    const [mainField, ...subFields] = name.split('.');\n\n    return subFields.reduce((acc, cur) => {\n        if (!acc) {\n            return acc;\n        }\n        return acc[cur];\n    }, values[mainField]);\n}\n\nexport interface RenewalJobFormProps {\n    onReceiveResponse?: (res: any) => void\n}\n\n// https://jaredpalmer.com/formik/docs/overview\nexport const RenewalJobForm = (props: RenewalJobFormProps) => {\n    \n\n    return <div className={styles.renewalForm}>\n        <h1>Create a Renewal Job</h1>\n        <Formik\n            initialValues={initialValues}\n            validate={values => {\n                const formValidateResult = ScraperCrossRequest.validate(values);\n                return formValidateResult;\n            }}\n            onSubmit={async (values: typeof initialValues, helpers: FormikHelpers<typeof initialValues>) => {\n                const res = await formSubmit(values, helpers);\n                props.onReceiveResponse && props.onReceiveResponse(res);\n            }}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                    <form onSubmit={handleSubmit}>\n                        {inputList.map((inputMeta, index) => (\n                            <div\n                                key={index}\n                                className={styles.field}\n                            >\n                                <label>{inputMeta.name}: </label>\n                                <input\n                                    className={styles.input}\n                                    type={inputMeta.type}\n                                    name={inputMeta.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={getNestedValueFromName(values, inputMeta.name)}\n                                />\n                                {getNestedValueFromName(errors, inputMeta.name) && getNestedValueFromName(touched, inputMeta.name) && getNestedValueFromName(errors, inputMeta.name)}\n                            </div>\n                        ))}\n                        <button className={styles.submitButton} type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </button>\n                    </form>\n                )}\n        </Formik>\n    </div>\n};\n","import React, { useState } from \"react\";\nimport { RenewalJobForm } from \"../components/renewal-job-form\";\n\nexport function ResumeJob() {\n    const [responseDisplay, setResponseDisplay] = useState({});\n\n    const onReceiveSubmitResponse = (res: any) => {\n        setResponseDisplay(res);\n    }\n\n    return <div>\n        {Object.keys(responseDisplay).length !== 0 && <div>\n            {JSON.stringify(responseDisplay, null, 4)}\n        </div>}\n        <RenewalJobForm onReceiveResponse={onReceiveSubmitResponse} />\n\n    </div>;\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { ResumeJob } from \"./pages/resume-job\";\n\nimport styles from './App.module.css';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className={styles.App}>\n        <h2>Navigation</h2>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/resume-job\">Resume Job</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/resume-job\">\n            <ResumeJob />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <>\n    <h2>Home</h2>\n    <p>\n      This is the supervisor scraper frontend\n    </p>\n  </>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}