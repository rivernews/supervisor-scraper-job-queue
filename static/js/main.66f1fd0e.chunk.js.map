{"version":3,"sources":["components/renewal-job-form.module.css","App.module.css","components/renewal-job-types.tsx","utilities/formUtilities.ts","services/authenticate.ts","components/renewal-job-form.tsx","pages/resume-job.tsx","pages/home.tsx","components/login-form.tsx","pages/login.tsx","services/apiService.ts","pages/control-panel.page.tsx","pages/node-scaling.page.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["module","exports","ScraperMode","ScraperCrossRequest","props","orgId","orgName","lastProgress","lastReviewPage","scrapeMode","this","classFieldName","lastProgressValidateResult","ScraperProgress","validate","Object","keys","lastProgressKey","typeName","key","type","classField","valiateResult","_validate","getNestedValueFromName","values","name","split","mainField","reduce","acc","cur","Authenticate","_token","_port","loadValue","TOKEN_CACHE_KEY","PORT_CACHE_KEY","cacheKey","valueStoredLocally","localStorage","getItem","setItem","valueString","thisValue","locallyStoredValue","tokenString","setValue","getValue","portString","_singleton","Authenticator","singleton","inputList","initialValues","port","token","formSubmit","a","setSubmitting","fetch","window","location","href","startsWith","URLSearchParams","method","headers","body","JSON","stringify","res","status","json","alert","id","RenewalJobForm","className","styles","renewalForm","onSubmit","helpers","onReceiveResponse","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","map","inputMeta","index","field","input","onChange","onBlur","value","submitButton","disabled","ResumeJob","useState","responseDisplay","setResponseDisplay","length","Home","tokenValue","trim","portValue","LoginForm","LoginPage","ApiSevice","PRODUCTION_API_SERVER_BASE_URL","asyncRequest","endpoint","logPrefix","POSTData","url","baseUrl","Error","statusText","asyncTerminateAllJobs","asyncResumeAllQueues","asyncPauseAllQueues","asyncStartS3Job","asyncCreateNode","size","asyncListNodes","scraperWorkerNodePools","nodePools","flatMap","np","nodes","asyncCleanNodes","asyncGetSeleniumMicroservice","asyncProvisionSeleniumMicroservice","asyncDestroySeleniumMicroservice","DEVELOPMENT_API_SERVER_BASE_URL","apiService","ControlPanelPage","submitting","onClick","NodeScalingPage","setNodes","disablePolling","setDisablePolling","nodeInstanceSize","setNodeInstanceSize","createNodeResponse","setCreateNodeResponse","deleteAllNodesResponse","setDeleteAllNodesResponse","listNodesResponse","setListNodesResponse","useEffect","polling","initialValue","event","target","NodeSizeSelector","apiRequestHandler","undefined","PollingToggleComponent","node","state","NodeScalingPanel","SeleniumMicroserviceScalingPanel","actionName","apiServiceFunction","setStateFunction","setResponseFunction","timestamp","Date","Array","isArray","resultObjects","apiServiceFunc","apiServiceFuncArgs","console","log","errorMessage","message","pollingScheduler","setInterval","clearInterval","disablePollingState","setDisablePollingState","seleniumMicroservice","setSeleniumMicroservice","provisionSeleniumResponse","setProvisionGetSeleniumResponse","destroySeleniumResponse","setDestroyGetSeleniumResponse","deploymentResult","serviceResult","metadata","conditions","condition","spec","clusterIP","ports","Boolean","hostname","match","ReactDOM","render","App","to","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sIACAA,EAAOC,QAAU,CAAC,YAAc,sCAAsC,MAAQ,gCAAgC,MAAQ,gCAAgC,aAAe,yC,mBCArKD,EAAOC,QAAU,CAAC,IAAM,mB,oGCDZC,E,yIAAAA,K,kBAAAA,E,mBAAAA,M,KAaL,IAAMC,EAAb,WAOI,WAAaC,GAAiC,yBANvCC,WAMsC,OALtCC,aAKsC,OAJtCC,kBAIsC,OAHtCC,oBAGsC,OAFtCC,gBAEsC,EAGzCC,KAAKL,MAAQD,EAAMC,MACnBK,KAAKJ,QAAUF,EAAME,QACrBI,KAAKH,aAAeH,EAAMG,aAC1BG,KAAKF,eAAiBJ,EAAMI,eAC5BE,KAAKD,WAAaL,EAAMK,WAdhC,0DAoBQL,GACiC,IAAD,uBAEhC,YAA8B,CAC1B,QACA,UAEA,iBACA,cALJ,+CAM4C,CAAC,IANlCO,EAMiC,QACxC,IAAKP,EAAMO,GACP,OAAO,eACFA,EAAiB,aAXE,kFAgBhC,IAAMC,EAA6BC,EAAgBC,SAASV,EAAMG,cAElE,GAAIK,EAA4B,CAAC,IAAD,EACDG,OAAOC,KAAKJ,GAAhCK,EADqB,oBAE5B,OAAO,sCACcA,GAAoBL,EAA2BK,SA1ChF,KA8DaJ,EAAb,uGAC6BT,EAAaO,EAA2CO,GAC7E,UAAWd,EAAMO,KAAoBO,EACjC,OAAO,eAAGP,EAAiB,cAHvC,+BAQQP,GACD,IAAD,uBACE,YAA0B,CACtB,CAAEe,IAAK,YAAaC,KAAM,UAC1B,CAAED,IAAK,cAAeC,KAAM,UAC5B,CAAED,IAAK,QAASC,KAAM,UACtB,CAAED,IAAK,kBAAmBC,KAAM,UAChC,CAAED,IAAK,OAAQC,KAAM,UACrB,CAAED,IAAK,mBAAoBC,KAAM,WANrC,+CAO8E,CAAC,IAPpEC,EAOmE,QACpEC,EAAgBT,EAAgBU,UAAUnB,EAAOiB,EAAWF,IAAKE,EAAWD,MAElF,GAAIE,EACA,OAAOA,GAZjB,uFATN,K,QCzEaE,EAAyB,SAACC,EAAsBC,GAAkB,IAAD,EACxCA,EAAKC,MAAM,KAD6B,iBACnEC,EADmE,KAG1E,OAH0E,WAGzDC,QAAO,SAACC,EAAKC,GAC1B,OAAKD,EAGEA,EAAIC,GAFAD,IAGZL,EAAOG,K,iBCVRI,E,WASF,aAAuB,yBAHfC,YAGc,OAFdC,WAEc,EAClBxB,KAAKuB,OAASvB,KAAKyB,UAAUH,EAAaI,iBAC1C1B,KAAKwB,MAAQxB,KAAKyB,UAAUH,EAAaK,gB,sDAG3BC,GACd,IAAMC,EAAqBC,aAAaC,QAAQH,GAChD,OAA2B,OAAvBC,EACOA,GAEPC,aAAaE,QAAQV,EAAaI,gBAAiB,IAC5C,M,+BAWEO,EAAqBL,GAElC,OADAE,aAAaE,QAAQJ,EAAUK,GACxBA,I,+BAGMC,EAAmBN,GAChC,GAAIM,GAA2B,KAAdA,EACb,OAAOA,EAGX,IAAMC,EAAqBL,aAAaC,QAAQH,GAChD,OAA2B,OAAvBO,EACOA,GAGXL,aAAaE,QAAQJ,EAAU,IACxB,M,0BAGDQ,GACNpC,KAAKuB,OAASvB,KAAKqC,SAASD,EAAad,EAAaI,kB,eAKtD,OADA1B,KAAKuB,OAASvB,KAAKsC,SAAStC,KAAKuB,OAAQD,EAAaI,iBAC/C1B,KAAKuB,S,yBAGPgB,GACLvC,KAAKwB,MAAQxB,KAAKqC,SAASE,EAAYjB,EAAaK,iB,eAKpD,OADA3B,KAAKwB,MAAQxB,KAAKsC,SAAStC,KAAKwB,MAAOF,EAAaK,gBAC7C3B,KAAKwB,S,iCArCZ,OAHKF,EAAakB,aACdlB,EAAakB,WAAa,IAAIlB,GAE3BA,EAAakB,e,KA5BtBlB,EACakB,gB,EADblB,EAGaI,gBAAkB,sDAH/BJ,EAIaK,eAAiB,qDAiE7B,IAAMc,EAAgBnB,EAAaoB,UC3DpCC,EAAY,CACd,CAAE3B,KAAM,UAAWN,KAAM,QACzB,CAAEM,KAAM,QAASN,KAAM,QACvB,CAAEM,KAAM,UAAWN,KAAM,QACzB,CAAEM,KAAM,yBAA0BN,KAAM,UACxC,CAAEM,KAAM,2BAA4BN,KAAM,UAC1C,CAAEM,KAAM,qBAAsBN,KAAM,UACpC,CAAEM,KAAM,+BAAgCN,KAAM,QAC9C,CAAEM,KAAM,oBAAqBN,KAAM,UACnC,CAAEM,KAAM,gCAAiCN,KAAM,UAC/C,CAAEM,KAAM,iBAAkBN,KAAM,OAEhC,CAAEM,KAAM,OAAQN,KAAM,QACtB,CAAEM,KAAM,QAASN,KAAM,SAGrBkC,EAAgB,CAClB,QAAW,GACX,MAAS,OACT,QAAW,QACX,aAAgB,CACZ,UAAa,KACb,YAAe,KACf,MAAS,MACT,gBAAmB,UACnB,KAAQ,IACR,iBAAoB,GAExB,eAAkB,iEAClB,WAAc,UAEd,KAAQH,EAAcI,KACtB,MAASJ,EAAcK,OAGrBC,EAAU,uCAAG,WAAOhC,EAAP,sBAAAiC,EAAA,6DAAuCC,EAAvC,EAAuCA,cAAvC,SACGC,OAAOC,OAAOC,SAASC,KAAKC,WAAW,SAAhC,0FAEDvC,EAAO8B,KAFN,oCAE+C,IAAIU,gBAAgB,CACxF,MAASxC,EAAO+B,QAChB,CACAU,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU7C,KAVV,UAaI,OAZb8C,EADS,QAaPC,OAbO,iCAcQD,EAAIE,OAdZ,cAcLA,EAdK,OAgBXjC,aAAaE,QArDC,sDAqDsBjB,EAAO+B,OAE3CkB,MAAM,8BAAgCD,EAAKE,IAC3ChB,GAAc,GAnBH,kBAoBJc,GApBI,iCAsBJF,GAtBI,4CAAH,wDAiCHK,EAAiB,SAACxE,GAC3B,OAAO,yBAAKyE,UAAWC,IAAOC,aAC1B,kBAAC,IAAD,CACIzB,cAAa,eACNA,EADM,CAETE,MAAOL,EAAcK,MACrBD,KAAMJ,EAAcI,OAExBzC,SAAU,SAAAW,GAEN,OAD2BtB,EAAoBW,SAASW,IAG5DuD,SAAQ,uCAAE,WAAOvD,EAA8BwD,GAArC,eAAAvB,EAAA,sEACYD,EAAWhC,EAAQwD,GAD/B,OACAV,EADA,OAENnE,EAAM8E,mBAAqB9E,EAAM8E,kBAAkBX,GAF7C,2CAAF,0DAKP,gBACG9C,EADH,EACGA,OACA0D,EAFH,EAEGA,OACAC,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAC,EANH,EAMGA,aACAC,EAPH,EAOGA,aAPH,OAUO,0BAAMR,SAAUO,GACXlC,EAAUoC,KAAI,SAACC,EAAWC,GAAZ,OACX,yBACIxE,IAAKwE,EACLd,UAAWC,IAAOc,OAElB,+BAAQF,EAAUhE,KAAlB,MACA,2BACImD,UAAWC,IAAOe,MAClBzE,KAAMsE,EAAUtE,KAChBM,KAAMgE,EAAUhE,KAChBoE,SAAUT,EACVU,OAAQT,EACRU,MAAOxE,EAAuBC,EAAQiE,EAAUhE,QAEnDF,EAAuB2D,EAAQO,EAAUhE,OAASF,EAAuB4D,EAASM,EAAUhE,OAASF,EAAuB2D,EAAQO,EAAUhE,UAGvJ,4BAAQmD,UAAWC,IAAOmB,aAAc7E,KAAK,SAAS8E,SAAUV,GAAhE,gBCxHjB,SAASW,IAAa,IAAD,EACsBC,mBAAS,IAD/B,mBACjBC,EADiB,KACAC,EADA,KAOxB,OAAO,6BACsC,IAAxCvF,OAAOC,KAAKqF,GAAiBE,QAAgB,6BACzClC,KAAKC,UAAU+B,EAAiB,KAAM,IAE3C,2DACA,kBAAC,EAAD,CAAgBnB,kBATY,SAACX,GAC7B+B,EAAmB/B,O,qBCJpB,SAASiC,IACZ,OACI,oCACI,oCACA,uECFZ,IAAMnD,EAAY,CACd,CAAE3B,KAAM,QAASN,KAAM,QACvB,CAAEM,KAAM,OAAQN,KAAM,SAGpBqC,EAAU,uCAAG,WAAOhC,EAAP,sBAAAiC,EAAA,sDAAsDC,EAAtD,EAAsDA,cAC/D8C,EAAahF,EAAO+B,MAAMkD,OAC1BC,EAAYlF,EAAO8B,KAAKmD,OAEX,KAAfD,IACAtD,EAAcK,MAAQiD,GAGR,KAAdE,IACAxD,EAAcI,KAAOoD,GAGzBjC,MAAM,sBAENf,GAAc,GAdC,2CAAH,wDAiBHiD,EAAY,WACrB,IAAMtD,EAAgB,CAClB,MAASH,EAAcK,MACvB,KAAQL,EAAcI,MAG1B,OAAO,6BACH,kBAAC,IAAD,CACID,cAAeA,EACfxC,SAAU,aACVkE,SAAUvB,IAET,gBACGhC,EADH,EACGA,OACA0D,EAFH,EAEGA,OACAC,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAC,EANH,EAMGA,aACAC,EAPH,EAOGA,aAPH,OAUO,0BAAMR,SAAUO,GACXlC,EAAUoC,KAAI,SAACC,EAAWC,GAAZ,OACX,yBACIxE,IAAKwE,GAEL,+BAAQD,EAAUhE,KAAlB,MACA,2BACIN,KAAMsE,EAAUtE,KAChBM,KAAMgE,EAAUhE,KAChBoE,SAAUT,EACVU,OAAQT,EACRU,MAAOxE,EAAuBC,EAAQiE,EAAUhE,QAEnDF,EAAuB2D,EAAQO,EAAUhE,OAASF,EAAuB4D,EAASM,EAAUhE,OAASF,EAAuB2D,EAAQO,EAAUhE,UAGvJ,4BAAQN,KAAK,SAAS8E,SAAUV,GAAhC,eC7DjB,SAASqB,IACZ,OAAQ,oCACJ,qCACA,kBAAC,EAAD,O,ICJFC,E,WAMF,aAAuB,IAAD,gCAHfC,+BAAiC,0BAGlB,KAmBdC,aAnBc,uCAmBC,WAAOC,EAAkBC,GAAzB,iCAAAxD,EAAA,6DAA4CQ,EAA5C,+BAAgF,OAAQiD,EAAxF,uBACbC,EAAM,UAAG,EAAKC,SAAR,OAAkBJ,EAAlB,KAAgC,IAAIhD,gBAAgB,CAC5DT,MAAOL,EAAcK,QAFN,kBAMGI,MACdwD,EADmB,aAEflD,UACe,SAAXA,GAAqBiD,EAAW,CAChC/C,KAAMC,KAAKC,UAAU6C,IACrB,GALW,CAMfhD,QAAS,CACL,eAAgB,uBAbb,UAkBI,OAZbI,EANS,QAkBPC,OAlBO,uBAmBL,IAAI8C,MAAJ,UAAaJ,EAAb,4BAA0C3C,EAAIC,OAA9C,aAAyDD,EAAIgD,aAnBxD,yBAqBEhD,EAAIE,OArBN,wKAnBD,6DA+Cf+C,sBAAwB,WAC3B,OAAO,EAAKR,aAAa,6BAA8B,sBAhDrC,KAmDfS,qBAAuB,WAC1B,OAAO,EAAKT,aAAa,4BAA6B,sBApDpC,KAuDfU,oBAAsB,WACzB,OAAO,EAAKV,aAAa,2BAA4B,qBAxDnC,KA2DfW,gBAAkB,WACrB,OAAO,EAAKX,aAAL,sBAAyC,iBA5D9B,KA+DfY,gBAAkB,SAACC,GACtB,OAAO,EAAKb,aAAL,iCAAqD,OAAQ,CAAEa,UAhEpD,KAmEfC,eAnEe,sBAmEE,8BAAApE,EAAA,sEACF,EAAKsD,aAAL,+BADE,YACdzC,EADc,QAEZwD,uBAFY,uBAGVC,EAAYzD,EAAIwD,uBAHN,kBAITC,EAAUC,SAAQ,SAAAC,GAAE,OAAIA,EAAGC,UAJlB,gCAOb,IAPa,2CAnEF,KA6EfC,gBAAkB,WACrB,OAAO,EAAKpB,aAAL,sCA9EW,KAiFfqB,6BAA+B,WAClC,OAAO,EAAKrB,aAAL,+BAAmD,QAlFxC,KAqFfsB,mCAAqC,WACxC,OAAO,EAAKtB,aAAL,qCAAyD,SAtF9C,KAyFfuB,iCAAmC,WACtC,OAAO,EAAKvB,aAAL,mCAAuD,W,wEAhF9D,MAAM,GAAN,OAAUF,EAAU0B,gCAApB,YAAuDrF,EAAcI,Q,8BAIrE,OACI7C,KAAKqG,kC,iCATT,OAHKD,EAAU5D,aACX4D,EAAU5D,WAAa,IAAI4D,GAExBA,EAAU5D,e,KAZnB4D,EACa5D,gB,EADb4D,EAIa0B,gCAAkC,cAgG9C,IAAMC,EAAa3B,EAAU1D,UCpG7B,SAASsF,IAAoB,IAAD,EACKtC,oBAAS,GADd,mBACxBuC,EADwB,KACZhF,EADY,KAE/B,OAAO,oCACH,6CAEA,4BAAQuC,SAAUyC,EAAYvH,KAAK,SAASwH,QAAO,sBAAE,4BAAAlF,EAAA,6DACjDC,GAAc,GADmC,kBAG3B8E,EAAWjB,wBAHgB,OAGvCjD,EAHuC,OAI7CG,MAAML,KAAKC,UAAUC,IAJwB,gDAM7CG,MAAML,KAAKC,UAAL,OANuC,QAQjDX,GAAc,GARmC,0DAArD,sBAWA,4BAAQuC,SAAUyC,EAAYvH,KAAK,SAASwH,QAAO,sBAAE,4BAAAlF,EAAA,6DACjDC,GAAc,GADmC,kBAG3B8E,EAAWhB,uBAHgB,OAGvClD,EAHuC,OAI7CG,MAAML,KAAKC,UAAUC,IAJwB,gDAM7CG,MAAML,KAAKC,UAAL,OANuC,QAQjDX,GAAc,GARmC,0DAArD,mBAWA,4BAAQuC,SAAUyC,EAAYvH,KAAK,SAASwH,QAAO,sBAAE,4BAAAlF,EAAA,6DACjDC,GAAc,GADmC,kBAG3B8E,EAAWf,sBAHgB,OAGvCnD,EAHuC,OAI7CG,MAAML,KAAKC,UAAUC,IAJwB,gDAM7CG,MAAML,KAAKC,UAAL,OANuC,QAQjDX,GAAc,GARmC,0DAArD,kBAWA,4BAAQuC,SAAUyC,EAAYvH,KAAK,SAASwH,QAAO,sBAAE,4BAAAlF,EAAA,6DACjDC,GAAc,GADmC,kBAG3B8E,EAAWd,kBAHgB,OAGvCpD,EAHuC,OAI7CG,MAAML,KAAKC,UAAUC,IAJwB,gDAM7CG,MAAM,UAAYL,KAAKC,UAAL,OAN2B,QAQjDX,GAAc,GARmC,0DAArD,iB,YCrCD,SAASkF,IACZ,OAAQ,oCAmGL,WAA6B,IAAD,EACKzC,oBAAS,GADd,mBACxBuC,EADwB,KACZhF,EADY,OAELyC,mBAA2B,IAFtB,mBAExB+B,EAFwB,KAEjBW,EAFiB,OAGa1C,oBAAS,GAHtB,mBAGxB2C,EAHwB,KAGRC,EAHQ,OAIiB5C,mBAA2B,UAJ5C,mBAIxB6C,EAJwB,KAINC,EAJM,OAMqB9C,mBAAS,MAN9B,mBAMxB+C,EANwB,KAMJC,EANI,OAO6BhD,mBAAS,MAPtC,mBAOxBiD,EAPwB,KAOAC,EAPA,OAQmBlD,mBAAS,MAR5B,mBAQxBmD,EARwB,KAQLC,EARK,KAU/BC,oBAAUC,EACNX,EADa,WAGbN,EAAWX,eACXgB,EACAU,EACA7F,GACD,CAACoF,IAkCJ,OAAO,oCACH,4CACA,6BACI,6BArEa,SAACY,EAAgCT,GAMtD,OACI,4BAAQpD,SALW,SAAC8D,GACpBV,EAAoBU,EAAMC,OAAO7D,QAICA,MAAO2D,GACrC,4BAAQ3D,MAAM,UAAd,mBACA,4BAAQA,MAAM,SAAd,mBA4DM8D,CAAiBb,EAAkBC,IACzC,4BAAQhD,SAAUyC,EAAYvH,KAAK,SAASwH,QAxBtB,WAC1B,OAAOmB,EAAkB,aAErB,CAACtB,EAAWb,gBAAiBqB,QAC7Be,EACAZ,EACAzF,KAkBA,eACA,6BACKwF,IAGT,6BACI,4BAAQjD,SAAUyC,EAAYvH,KAAK,SAASwH,QApBrB,WAC3B,OAAOmB,EAAkB,cAErBtB,EAAWL,qBACX4B,EACAV,EACA3F,KAcA,oBACA,6BACK0F,IAKT,2CAECY,EAAuBlB,EAAgBC,GAExC,4BAAQ9C,SAAUyC,EAAYvH,KAAK,SAASwH,QAnDnB,WACzB,OAAOmB,EAAkB,WAErBtB,EAAWX,eACXgB,EACAU,EACA7F,KA6CJ,cACA,6BACK4F,GAGa,IAAjBpB,EAAM5B,OAAgB,wDAAsC4B,EAAM1C,KAAI,SAACyE,EAAMvE,GAC1E,OAAQuE,EACJ,yBAAK/I,IAAKwE,GACN,4BAAKuE,EAAKxI,MAAQ,aAClB,uCAAawI,EAAK1F,OAAS0F,EAAK1F,OAAO2F,MAAQ9F,KAAKC,UAAU4F,IAC9D,6BAAK,wCAAc7F,KAAKC,UAAU4F,MAJ1B,yBAAK/I,IAAKwE,GAAO,sCAAjB,IAAkCtB,KAAKC,UAAU4F,QAhLpEE,GAEAC,KAIT,IAAMN,EAAiB,uCAAG,WACtBO,EACAC,EACAC,EACAC,EACA9G,GALsB,yBAAAD,EAAA,yDAOhBgH,EAAY,IAAIC,KACtBhH,GAAiBA,GAAc,GART,SAWbiH,MAAMC,QAAQN,GAXD,gCAYQA,IAZR,OAYdO,EAZc,mDAckCP,GAAzCQ,EAdO,KAcYC,EAdZ,qBAeQD,EAAc,WAAd,cAAkBC,IAf1B,QAedF,EAfc,eAiBlBG,QAAQC,IAAIZ,EAAYQ,GACxBN,GAAoBA,EAAiBM,GACrCL,GAAuBA,EAAoB,GAAD,OAAIH,EAAJ,uBAA6BjG,KAAKC,UAAUwG,GAA5C,eAAiEJ,IAnBzF,kDAqBdD,IACIU,EAAe,GAEfA,EADA,gBAAiB7D,MACF,KAAM8D,QAEN/G,KAAKC,UAAL,MAGnBmG,EAAoB,UAAYU,EAAZ,cAAkCT,KA7BxC,yBAgClB/G,GAAiBA,GAAc,GAhCb,6EAAH,8DAoCjB+F,EAAU,SACZxD,EACAoE,EACAC,EACAC,EACAC,EACA9G,GAEA,OAAO,WACH,IAAIuC,EAAJ,CAIA,IAAMmF,EAAmBC,aAAY,WACjC,OAAOvB,EACHO,EACAC,EACAC,EACAC,EACA9G,KAEL,KAIH,OAAO,kBAAM4H,cAAcF,OAK7BpB,EAAyB,SAC3BuB,EACAC,GAEA,OAAQ,6BACJ,4BAAQ7C,QAAS,kBAAM6C,GAAwBD,KAA/C,kBACA,4CAAkBA,EAAsB,MAAQ,QA6GjD,IAAMnB,EAAmC,WAAO,IAAD,EACdjE,oBAAS,GADK,mBAC3CuC,EAD2C,KAC/BhF,EAD+B,OAEMyC,wBAA2C4D,GAFjD,mBAE3C0B,EAF2C,KAErBC,EAFqB,OAGmBvF,mBAAS,MAH5B,mBAG3CwF,EAH2C,KAGhBC,EAHgB,OAIezF,mBAAS,MAJxB,mBAI3C0F,EAJ2C,KAIlBC,EAJkB,OAKN3F,oBAAS,GALH,mBAK3C2C,EAL2C,KAK3BC,EAL2B,KAOlDS,oBAAUC,EACNX,EADa,cAGbN,EAAWJ,6BACXsD,OACA3B,EACArG,GACD,CAACoF,IA0BJ,OAAQ,oCACJ,gDAEA,4BAAQ7C,SAAUyC,EAAYC,QAlBG,kBAAMmB,EAAkB,oBAEzDtB,EAAWH,wCACX0B,EACA6B,EACAlI,KAaA,sBACA,6BAAMiI,GAEN,4BAAQ1F,SAAUyC,EAAYC,QAdC,kBAAMmB,EAAkB,kBAEvDtB,EAAWF,sCACXyB,EACA+B,EACApI,KASA,oBACA,6BAAMmI,GAGN,+CAEC7B,EAAuBlB,EAAgBC,GAExC,4BAAQ9C,SAAUyC,EAAYC,QAtCH,WAC3B,OAAOmB,EAAkB,cAErBtB,EAAWJ,6BACXsD,OACA3B,EACArG,KAgCJ,gBACC+H,GAAyBA,EAAqBM,kBAAoBN,EAAqBO,cAAkB,6BACrGP,EAAqBM,kBAAqB,oCACvC,4BAAKN,EAAqBM,iBAAiB5H,KAAK8H,SAASxK,MACxDgK,EAAqBM,iBAAiB5H,KAAKI,OAAO2H,WAAW1G,KAAI,SAAC2G,EAAWzG,GAAZ,OAAuB,yBAAKxE,IAAKwE,GAC/F,sCACayG,EAAUhL,KADvB,MACgCgL,EAAUhB,cAKjDM,EAAqBO,eAAkB,oCACpC,4BAAKP,EAAqBO,cAAc7H,KAAK8H,SAASxK,MACtD,oCAAUgK,EAAqBO,cAAc7H,KAAKiI,KAAKC,WACvD,sCAAYZ,EAAqBO,cAAc7H,KAAKiI,KAAKE,MAAM9G,KAAI,SAAAlC,GAAI,OAAIA,EAAKA,WAE7E,qCC3PCiJ,QACW,cAA7B3I,OAAOC,SAAS2I,UAEe,UAA7B5I,OAAOC,SAAS2I,UAEhB5I,OAAOC,SAAS2I,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCWD,WACb,OACE,kBAAC,IAAD,KACE,yBAAK/H,UAAWC,IAAO+H,KACrB,0CACA,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,eAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,sBAEF,4BACE,uBAAG/I,KAAI,UACL0E,EAAW1B,+BADN,4BAEqD5D,EAAcK,QAF1E,+BASN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuJ,KAAK,eACV,kBAAC5G,EAAD,OAEF,kBAAC,IAAD,CAAO4G,KAAK,kBACV,kBAACrE,EAAD,OAEF,kBAAC,IAAD,CAAOqE,KAAK,QACV,kBAAClE,EAAD,OAEF,kBAAC,IAAD,CAAOkE,KAAK,UACV,kBAAClG,EAAD,OAEF,kBAAC,IAAD,CAAOkG,KAAK,KACV,kBAACvG,EAAD,YDzDI,MAASwG,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMrC,c","file":"static/js/main.66f1fd0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"renewalForm\":\"renewal-job-form_renewalForm__2a6rn\",\"field\":\"renewal-job-form_field__V5AVd\",\"input\":\"renewal-job-form_input__37mDi\",\"submitButton\":\"renewal-job-form_submitButton__3OXbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","export enum ScraperMode {\n    REGULAR = 'regular',\n    RENEWAL = 'renewal'\n}\n\nexport interface ScraperCrossRequestData {\n    orgId: string;\n    orgName: string;\n    lastProgress: ScraperProgressData;\n    lastReviewPage: string;\n    scrapeMode: ScraperMode;\n};\n\nexport class ScraperCrossRequest implements ScraperCrossRequestData {\n    public orgId: string;\n    public orgName: string;\n    public lastProgress: ScraperProgressData;\n    public lastReviewPage: string;\n    public scrapeMode: ScraperMode;\n\n    constructor (props: ScraperCrossRequestData) {\n        // ScraperCrossRequest.isScraperCrossRequestData(props);\n\n        this.orgId = props.orgId;\n        this.orgName = props.orgName;\n        this.lastProgress = props.lastProgress;\n        this.lastReviewPage = props.lastReviewPage;\n        this.scrapeMode = props.scrapeMode;\n    }\n\n    // type guard in Typescript\n    // https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\n    public static validate (\n        props: any,\n    ): { [key: string]: string } | void {\n\n        for (const classFieldName of ([\n            'orgId',\n            'orgName',\n            // 'lastProgress', // validate in its own logic later\n            'lastReviewPage',\n            'scrapeMode',\n        ] as Array<keyof ScraperCrossRequestData>)) {\n            if (!props[classFieldName]) {\n                return {\n                    [classFieldName]: 'required'\n                } as { [key in keyof ScraperCrossRequestData]: string };\n            }\n        }\n\n        const lastProgressValidateResult = ScraperProgress.validate(props.lastProgress);\n\n        if (lastProgressValidateResult) {\n            const [lastProgressKey,] = Object.keys(lastProgressValidateResult) as Array<keyof ScraperProgressData>;\n            return {\n                [`lastProgress.${lastProgressKey}`]: lastProgressValidateResult[lastProgressKey]\n            };\n        }\n\n        return;\n    }\n}\n\nexport interface ScraperProgressData {\n    // used in all cases\n    processed: number;\n    wentThrough: number;\n    total: number;\n\n    // used in FINISH and propogate back progress to schedule cross session job\n    durationInMilli: string;\n    page: number;\n    processedSession: number;\n}\n\nexport class ScraperProgress {\n    private static _validate(props: any,  classFieldName: keyof ScraperProgressData, typeName: 'number' | 'string'): { [key in keyof ScraperProgressData]: string } | void {\n        if (typeof props[classFieldName] !== typeName) {\n            return { [classFieldName]: 'required' } as { [key in keyof ScraperProgressData]: string };\n        }\n    }\n\n    public static validate (\n        props: any,\n    ) {\n        for (const classField of ([\n            { key: 'processed', type: 'number' },\n            { key: 'wentThrough', type: 'number' },\n            { key: 'total', type: 'number' },\n            { key: 'durationInMilli', type: 'string' },\n            { key: 'page', type: 'number' },\n            { key: 'processedSession', type: 'number' },\n        ] as Array<{ key: keyof ScraperProgressData, 'type': 'number' | 'string' }>)) {\n            const valiateResult = ScraperProgress._validate(props, classField.key, classField.type);\n\n            if (valiateResult) {\n                return valiateResult;\n            }\n        }\n\n        return;\n    }\n}\n","import { FormikValues } from 'formik';\n\nexport const getNestedValueFromName = (values: FormikValues, name: string) => {\n    const [mainField, ...subFields] = name.split('.');\n\n    return subFields.reduce((acc, cur) => {\n        if (!acc) {\n            return acc;\n        }\n        return acc[cur];\n    }, values[mainField]);\n}","class Authenticate {\n    private static _singleton: Authenticate;\n\n    private static TOKEN_CACHE_KEY = 'supervisor-scraper-job-queue:renewal-job-form:token';\n    private static PORT_CACHE_KEY = 'supervisor-scraper-job-queue:renewal-job-form:port';\n\n    private _token: string;\n    private _port: string;\n    \n    private constructor() {\n        this._token = this.loadValue(Authenticate.TOKEN_CACHE_KEY);\n        this._port = this.loadValue(Authenticate.PORT_CACHE_KEY);\n    }\n\n    private loadValue(cacheKey: string) {\n        const valueStoredLocally = localStorage.getItem(cacheKey);\n        if (valueStoredLocally !== null) {\n            return valueStoredLocally;\n        } else {\n            localStorage.setItem(Authenticate.TOKEN_CACHE_KEY, '');\n            return '';\n        }\n    }\n\n    static get singleton() {\n        if (!Authenticate._singleton) {\n            Authenticate._singleton = new Authenticate();\n        }\n        return Authenticate._singleton;\n    }\n\n    private setValue(valueString: string, cacheKey: string) {\n        localStorage.setItem(cacheKey, valueString);\n        return valueString;\n    }\n\n    private getValue(thisValue: string, cacheKey: string) {\n        if (thisValue && thisValue !== '') {\n            return thisValue;\n        }\n\n        const locallyStoredValue = localStorage.getItem(cacheKey);\n        if (locallyStoredValue !== null) {\n            return locallyStoredValue;\n        }\n\n        localStorage.setItem(cacheKey, '');\n        return '';\n    }\n\n    set token(tokenString: string) {\n        this._token = this.setValue(tokenString, Authenticate.TOKEN_CACHE_KEY);\n    }\n\n    get token() {\n        this._token = this.getValue(this._token, Authenticate.TOKEN_CACHE_KEY);\n        return this._token;\n    }\n\n    set port(portString: string) {\n        this._port = this.setValue(portString, Authenticate.PORT_CACHE_KEY);\n    }\n\n    get port() {\n        this._port = this.getValue(this._port, Authenticate.PORT_CACHE_KEY);\n        return this._port;\n    }\n}\n\nexport const Authenticator = Authenticate.singleton;\n","import React from \"react\";\nimport { Formik, FormikHelpers } from 'formik';\nimport { ScraperCrossRequest } from \"./renewal-job-types\";\nimport { getNestedValueFromName } from \"../utilities/formUtilities\";\n\nimport styles from './renewal-job-form.module.css';\nimport { Authenticator } from \"../services/authenticate\";\n\nconst tokenCacheKey = 'supervisor-scraper-job-queue:renewal-job-form:token';\n\nconst inputList = [\n    { name: 'orgInfo', type: 'text' },\n    { name: 'orgId', type: 'text' },\n    { name: 'orgName', type: 'text' },\n    { name: 'lastProgress.processed', type: 'number' },\n    { name: 'lastProgress.wentThrough', type: 'number' },\n    { name: 'lastProgress.total', type: 'number' },\n    { name: 'lastProgress.durationInMilli', type: 'text' },\n    { name: 'lastProgress.page', type: 'number' },\n    { name: 'lastProgress.processedSession', type: 'number' },\n    { name: 'lastReviewPage', type: 'url' },\n\n    { name: 'port', type: 'text' },\n    { name: 'token', type: 'text' }\n]\n\nconst initialValues = {\n    'orgInfo': '',\n    'orgId': '1138',\n    'orgName': 'Apple',\n    'lastProgress': {\n        'processed': 4413,\n        'wentThrough': 4610,\n        'total': 15407,\n        'durationInMilli': '5430000',\n        'page': 461,\n        'processedSession': 3\n    },\n    'lastReviewPage': 'https://www.glassdoor.com/Reviews/Apple-Reviews-E1138_P461.htm',\n    'scrapeMode': 'renewal',\n    \n    'port': Authenticator.port,\n    'token': Authenticator.token\n}\n\nconst formSubmit = async (values: typeof initialValues, { setSubmitting }: FormikHelpers<typeof initialValues>) => {\n    const res = await fetch((window.location.href.startsWith('https') ?\n        `https://slack.api.shaungc.com/queues/single-org-renewal-job?` : \n        `http://localhost:${values.port}/queues/single-org-renewal-job?`) + new URLSearchParams({\n        'token': values.token\n    }), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values),\n    });\n\n    if (res.status === 200) {\n        const json = await res.json();\n\n        localStorage.setItem(tokenCacheKey, values.token);\n\n        alert('Submit success! Job number ' + json.id);\n        setSubmitting(false);\n        return json;\n    } else {\n        return res;\n    }\n}\n\n\n\nexport interface RenewalJobFormProps {\n    onReceiveResponse?: (res: any) => void\n}\n\n// https://jaredpalmer.com/formik/docs/overview\nexport const RenewalJobForm = (props: RenewalJobFormProps) => {\n    return <div className={styles.renewalForm}>\n        <Formik\n            initialValues={{\n                ...initialValues,\n                token: Authenticator.token,\n                port: Authenticator.port\n            }}\n            validate={values => {\n                const formValidateResult = ScraperCrossRequest.validate(values);\n                return formValidateResult;\n            }}\n            onSubmit={async (values: typeof initialValues, helpers: FormikHelpers<typeof initialValues>) => {\n                const res = await formSubmit(values, helpers);\n                props.onReceiveResponse && props.onReceiveResponse(res);\n            }}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                    <form onSubmit={handleSubmit}>\n                        {inputList.map((inputMeta, index) => (\n                            <div\n                                key={index}\n                                className={styles.field}\n                            >\n                                <label>{inputMeta.name}: </label>\n                                <input\n                                    className={styles.input}\n                                    type={inputMeta.type}\n                                    name={inputMeta.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={getNestedValueFromName(values, inputMeta.name)}\n                                />\n                                {getNestedValueFromName(errors, inputMeta.name) && getNestedValueFromName(touched, inputMeta.name) && getNestedValueFromName(errors, inputMeta.name)}\n                            </div>\n                        ))}\n                        <button className={styles.submitButton} type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </button>\n                    </form>\n                )}\n        </Formik>\n    </div>\n};\n","import React, { useState } from \"react\";\nimport { RenewalJobForm } from \"../components/renewal-job-form\";\n\nexport function ResumeJob() {\n    const [responseDisplay, setResponseDisplay] = useState({});\n\n    const onReceiveSubmitResponse = (res: any) => {\n        setResponseDisplay(res);\n    }\n\n    return <div>\n        {Object.keys(responseDisplay).length !== 0 && <div>\n            {JSON.stringify(responseDisplay, null, 4)}\n        </div>}\n        <h1>Create a New or Renewal Job</h1>\n        <RenewalJobForm onReceiveResponse={onReceiveSubmitResponse} />\n\n    </div>;\n}\n","\nimport React from \"react\";\n\nexport function Home() {\n    return (\n        <>\n            <h2>Home</h2>\n            <p>\n                This is the supervisor scraper frontend\n            </p>\n        </>\n    );\n}","import React from \"react\";\nimport { FormikHelpers, Formik } from \"formik\";\nimport { getNestedValueFromName } from \"../utilities/formUtilities\";\nimport { Authenticator } from \"../services/authenticate\";\n\nconst inputList = [\n    { name: 'token', type: 'text' },\n    { name: 'port', type: 'text' },\n]\n\nconst formSubmit = async (values: { 'token': string, 'port': string }, { setSubmitting }: FormikHelpers<{ 'token': string, 'port': string }>) => {\n    const tokenValue = values.token.trim();\n    const portValue = values.port.trim();\n\n    if (tokenValue !== '') {\n        Authenticator.token = tokenValue;\n    }\n\n    if (portValue !== '') {\n        Authenticator.port = portValue;\n    }\n\n    alert('Credentials stored');\n\n    setSubmitting(false);\n}\n\nexport const LoginForm = () => {\n    const initialValues = {\n        'token': Authenticator.token,\n        'port': Authenticator.port\n    }\n\n    return <div>\n        <Formik\n            initialValues={initialValues}\n            validate={() => {}}\n            onSubmit={formSubmit}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                    <form onSubmit={handleSubmit}>\n                        {inputList.map((inputMeta, index) => (\n                            <div\n                                key={index}\n                            >\n                                <label>{inputMeta.name}: </label>\n                                <input\n                                    type={inputMeta.type}\n                                    name={inputMeta.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={getNestedValueFromName(values, inputMeta.name)}\n                                />\n                                {getNestedValueFromName(errors, inputMeta.name) && getNestedValueFromName(touched, inputMeta.name) && getNestedValueFromName(errors, inputMeta.name)}\n                            </div>\n                        ))}\n                        <button type=\"submit\" disabled={isSubmitting}>\n                            Store\n                        </button>\n                    </form>\n                )}\n        </Formik>\n    </div>\n}\n","import React from \"react\";\nimport { LoginForm } from \"../components/login-form\";\n\n\nexport function LoginPage () {\n    return (<>\n        <h2>Login</h2>\n        <LoginForm />\n    </>)\n}","import { Authenticator } from \"./authenticate\";\nimport { KubernetesNodePool, NodeInstanceSize } from \"../types/k8s.types\";\n\nclass ApiSevice {\n    private static _singleton: ApiSevice;\n\n    public PRODUCTION_API_SERVER_BASE_URL = '//slack.api.shaungc.com';\n    private static DEVELOPMENT_API_SERVER_BASE_URL = '//localhost';\n\n    private constructor() {}\n\n    public static get singleton() {\n        if (!ApiSevice._singleton) {\n            ApiSevice._singleton = new ApiSevice();\n        }\n        return ApiSevice._singleton;\n    }\n\n    public get developmentApiServerBaseUrl() {\n        return `${ApiSevice.DEVELOPMENT_API_SERVER_BASE_URL}:${Authenticator.port}`\n    }\n\n    private get baseUrl () {\n        return process.env.NODE_ENV === 'production' ?\n            this.PRODUCTION_API_SERVER_BASE_URL :\n            this.developmentApiServerBaseUrl\n    }\n\n    private asyncRequest = async (endpoint: string, logPrefix: string, method: 'POST' | 'GET' | 'DELETE' = 'POST', POSTData?: {[key: string]: any}) => {\n        const url = `${this.baseUrl}${endpoint}?` + new URLSearchParams({\n            token: Authenticator.token\n        });\n\n        try {\n            const res = await fetch(\n                url, {\n                    method,\n                    ...(method === 'POST' && POSTData ? {\n                        body: JSON.stringify(POSTData)\n                    } : {}),\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            );\n\n            if (res.status !== 200) {\n                throw new Error(`${logPrefix} request failed: ${res.status}, ${res.statusText}`);\n            } else {\n                return await res.json();\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public asyncTerminateAllJobs = () => {\n        return this.asyncRequest('/queues/terminate-all-jobs', 'Terminate all job');\n    }\n\n    public asyncResumeAllQueues = () => {\n        return this.asyncRequest('/queues/resume-all-queues', 'Resume all queues');\n    }\n\n    public asyncPauseAllQueues = () => {\n        return this.asyncRequest('/queues/pause-all-queues', 'Pause all queues');\n    }\n\n    public asyncStartS3Job = () => {\n        return this.asyncRequest(`/queues/s3-orgs-job`, 'Start S3 Job');\n    }\n\n    public asyncCreateNode = (size: NodeInstanceSize) => {\n        return this.asyncRequest(`/k8s/create-node`, `Create node`, 'POST', { size })\n    }\n\n    public asyncListNodes = async () => {\n        const res = await this.asyncRequest(`/k8s/list-node`, `List nodes`);\n        if (res.scraperWorkerNodePools) {\n            const nodePools = res.scraperWorkerNodePools as KubernetesNodePool[];\n            return nodePools.flatMap(np => np.nodes);\n        }\n\n        return [];\n    }\n\n    public asyncCleanNodes = () => {\n        return this.asyncRequest(`/k8s/clean-node`, `Clear all nodes`);\n    }\n\n    public asyncGetSeleniumMicroservice = () => {\n        return this.asyncRequest(`/k8s/selenium`, `Get selenium`, 'GET');\n    }\n\n    public asyncProvisionSeleniumMicroservice = () => {\n        return this.asyncRequest(`/k8s/selenium`, `Provision selenium`, 'POST');\n    }\n\n    public asyncDestroySeleniumMicroservice = () => {\n        return this.asyncRequest(`/k8s/selenium`, `Destroy selenium`, 'DELETE');\n    }\n}\n\nexport const apiService = ApiSevice.singleton;\n","import React, { useState } from \"react\";\nimport { apiService } from \"../services/apiService\";\n\nexport function ControlPanelPage() {\n    const [submitting, setSubmitting] = useState(false);\n    return <>\n        <h2>Control Panel</h2>\n\n        <button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncTerminateAllJobs();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Terminate All Jobs</button>\n\n        <button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncResumeAllQueues();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Resume All Jobs</button>\n\n        <button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncPauseAllQueues();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Pause All Jobs</button>\n\n        <button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncStartS3Job();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert('Error: ' + JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Start S3 Job</button>\n\n    </>\n}\n","import React, { useState, useEffect } from \"react\";\nimport { apiService } from \"../services/apiService\";\nimport { KubernetesNode, SeleniumMicroservice, NodeInstanceSize, } from \"../types/k8s.types\";\n\nexport function NodeScalingPage() {\n    return (<>\n        {NodeScalingPanel()}\n\n        {SeleniumMicroserviceScalingPanel()}\n    </>)\n}\n\nconst apiRequestHandler = async (\n    actionName: string,\n    apiServiceFunction: (() => Promise<any>) | [(...args: any[]) => Promise<any>, ...any[]],\n    setStateFunction?: React.Dispatch<React.SetStateAction<any>>,\n    setResponseFunction?: React.Dispatch<React.SetStateAction<string>>,\n    setSubmitting?: (value: boolean) => void\n) => {\n    const timestamp = new Date();\n    setSubmitting && setSubmitting(true);\n    try {\n        let resultObjects: any;\n        if (!Array.isArray(apiServiceFunction) ) {\n            resultObjects = await apiServiceFunction();\n        } else {\n            const [apiServiceFunc, ...apiServiceFuncArgs] = apiServiceFunction;\n            resultObjects = await apiServiceFunc(...apiServiceFuncArgs);\n        }\n        console.log(actionName, resultObjects);\n        setStateFunction && setStateFunction(resultObjects);\n        setResponseFunction && setResponseFunction(`${actionName} Status: OK ${JSON.stringify(resultObjects)} -- ${timestamp}`);\n    } catch (error) {\n        if (setResponseFunction) {\n            let errorMessage = '';\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            } else {\n                errorMessage = JSON.stringify(error);\n            }\n\n            setResponseFunction(`Error: ` + errorMessage + ` -- ${timestamp}`);\n        }\n    } finally {\n        setSubmitting && setSubmitting(false);\n    }\n}\n\nconst polling = (\n    disabled: boolean,\n    actionName: string,\n    apiServiceFunction: () => Promise<any>,\n    setStateFunction?: React.Dispatch<React.SetStateAction<any>>,\n    setResponseFunction?: React.Dispatch<React.SetStateAction<string>>,\n    setSubmitting?: (value: boolean) => void,\n) => {\n    return () => {\n        if (disabled) {\n            return;\n        }\n\n        const pollingScheduler = setInterval(() => {\n            return apiRequestHandler(\n                actionName,\n                apiServiceFunction,\n                setStateFunction,\n                setResponseFunction,\n                setSubmitting\n            )\n        }, 5000)\n\n        // need to return a func for handling unmount\n        // https://upmostly.com/tutorials/setinterval-in-react-components-using-hooks\n        return () => clearInterval(pollingScheduler);\n    }\n}\n\n\nconst PollingToggleComponent = (\n    disablePollingState: boolean,\n    setDisablePollingState: React.Dispatch<React.SetStateAction<boolean>>\n) => {\n    return (<div>\n        <button onClick={() => setDisablePollingState(!disablePollingState)}>Toggle polling</button>\n        <span>Polling is {disablePollingState ? 'off' : 'on'}</span>\n    </div>)\n}\n\n\nconst NodeSizeSelector = (initialValue: NodeInstanceSize, setNodeInstanceSize: React.Dispatch<React.SetStateAction<NodeInstanceSize>>) => {\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setNodeInstanceSize(event.target.value as NodeInstanceSize)\n    }\n\n    return (\n        <select onChange={handleOnChange} value={initialValue}>\n            <option value=\"MEDIUM\">Medium - 4G RAM</option>\n            <option value=\"LARGE\">Large - 8G RAM</option>\n        </select>\n    )\n}\n\n\nexport function NodeScalingPanel() {\n    const [submitting, setSubmitting] = useState(false);\n    const [nodes, setNodes] = useState<KubernetesNode[]>([]);\n    const [disablePolling, setDisablePolling] = useState(true);\n    const [nodeInstanceSize, setNodeInstanceSize] = useState<NodeInstanceSize>('MEDIUM');\n\n    const [createNodeResponse, setCreateNodeResponse] = useState('--');\n    const [deleteAllNodesResponse, setDeleteAllNodesResponse] = useState('--');\n    const [listNodesResponse, setListNodesResponse] = useState('--');\n\n    useEffect(polling(\n        disablePolling,\n        `ListNode`,\n        apiService.asyncListNodes,\n        setNodes,\n        setListNodesResponse,\n        setSubmitting\n    ), [disablePolling]);\n\n    // UI handler\n\n    const handleClickListNodes = () => {\n        return apiRequestHandler(\n            `ListNode`,\n            apiService.asyncListNodes,\n            setNodes,\n            setListNodesResponse,\n            setSubmitting\n        )\n    }\n\n    const handleClickCreateNode = () => {\n        return apiRequestHandler(\n            `CreateNode`,\n            [apiService.asyncCreateNode, nodeInstanceSize],\n            undefined,\n            setCreateNodeResponse,\n            setSubmitting\n        );\n    }\n\n    const handleClickDeleteNodes = () => {\n        return apiRequestHandler(\n            `DeleteNodes`,\n            apiService.asyncCleanNodes,\n            undefined,\n            setDeleteAllNodesResponse,\n            setSubmitting\n        );\n    }\n\n    return <>\n        <h2>Node Scaling</h2>\n        <div>\n            <div>{NodeSizeSelector(nodeInstanceSize, setNodeInstanceSize)}</div>\n            <button disabled={submitting} type=\"button\" onClick={handleClickCreateNode}>Create node</button>\n            <div>\n                {createNodeResponse}\n            </div>\n        </div>\n        <div>\n            <button disabled={submitting} type=\"button\" onClick={handleClickDeleteNodes}>Delete all nodes</button>\n            <div>\n                {deleteAllNodesResponse}\n            </div>\n        </div>\n\n\n        <h2>Node Status</h2>\n\n        {PollingToggleComponent(disablePolling, setDisablePolling)}\n\n        <button disabled={submitting} type=\"button\" onClick={handleClickListNodes}>List nodes</button>\n        <div>\n            {listNodesResponse}\n        </div>\n\n        {nodes.length === 0 ? (<div>No scraper worker node.</div>) : nodes.map((node, index) => {\n            return !node ? (<div key={index}><h3>(Null)</h3> {JSON.stringify(node)}</div>) : (\n                <div key={index} >\n                    <h3>{node.name || '(No name)'}</h3>\n                    <div>State: {node.status ? node.status.state : JSON.stringify(node)}</div>\n                    <div><em>Payload: {JSON.stringify(node)}</em></div>\n                </div>\n            );\n        })}\n    </>\n}\n\nexport const SeleniumMicroserviceScalingPanel = () => {\n    const [submitting, setSubmitting] = useState(false);\n    const [seleniumMicroservice, setSeleniumMicroservice] = useState<SeleniumMicroservice | undefined>(undefined);\n    const [provisionSeleniumResponse, setProvisionGetSeleniumResponse] = useState('--');\n    const [destroySeleniumResponse, setDestroyGetSeleniumResponse] = useState('--');\n    const [disablePolling, setDisablePolling] = useState(true);\n\n    useEffect(polling(\n        disablePolling,\n        `GetSelenium`,\n        apiService.asyncGetSeleniumMicroservice,\n        setSeleniumMicroservice,\n        undefined,\n        setSubmitting\n    ), [disablePolling]);\n\n    const handleClickGetSelenium = () => {\n        return apiRequestHandler(\n            `GetSelenium`,\n            apiService.asyncGetSeleniumMicroservice,\n            setSeleniumMicroservice,\n            undefined,\n            setSubmitting\n        );\n    };\n    const handleClickProvisionSelenium = () => apiRequestHandler(\n        `ProvisionSelenium`,\n        apiService.asyncProvisionSeleniumMicroservice,\n        undefined,\n        setProvisionGetSeleniumResponse,\n        setSubmitting\n    );\n    const handleClickDestroySelenium = () => apiRequestHandler(\n        `DestroySelenium`,\n        apiService.asyncDestroySeleniumMicroservice,\n        undefined,\n        setDestroyGetSeleniumResponse,\n        setSubmitting\n    );\n\n    return (<>\n        <h2>Selenium Scaling</h2>\n\n        <button disabled={submitting} onClick={handleClickProvisionSelenium}>Provision selenium</button>\n        <div>{provisionSeleniumResponse}</div>\n\n        <button disabled={submitting} onClick={handleClickDestroySelenium}>Destroy selenium</button>\n        <div>{destroySeleniumResponse}</div>\n\n\n        <h2>Selenium Status</h2>\n\n        {PollingToggleComponent(disablePolling, setDisablePolling)}\n\n        <button disabled={submitting} onClick={handleClickGetSelenium}>Get selenium</button>\n        {seleniumMicroservice && (seleniumMicroservice.deploymentResult && seleniumMicroservice.serviceResult) ? (<div>\n            {seleniumMicroservice.deploymentResult && (<>\n                <h3>{seleniumMicroservice.deploymentResult.body.metadata.name}</h3>\n                {seleniumMicroservice.deploymentResult.body.status.conditions.map((condition, index) => (<div key={index}>\n                    <p>\n                        Status: {condition.type} - {condition.message}\n                    </p>\n                </div>))}\n            </>)}\n\n            {seleniumMicroservice.serviceResult && (<>\n                <h3>{seleniumMicroservice.serviceResult.body.metadata.name}</h3>\n                <div>IP: {seleniumMicroservice.serviceResult.body.spec.clusterIP}</div>\n                <div>Port: {seleniumMicroservice.serviceResult.body.spec.ports.map(port => port.port)}</div>\n            </>)}\n        </div>) : (<div>--</div>)}\n    </>);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { ResumeJob } from \"./pages/resume-job\";\n\nimport styles from './App.module.css';\nimport { Home } from \"./pages/home\";\nimport { LoginPage } from \"./pages/login\";\nimport { ControlPanelPage } from \"./pages/control-panel.page\";\nimport { Authenticator } from \"./services/authenticate\";\nimport { apiService } from \"./services/apiService\";\nimport { NodeScalingPage } from \"./pages/node-scaling.page\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className={styles.App}>\n        <h2>Navigation</h2>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/k8s\">Node scaling</Link>\n            </li>\n            <li>\n              <Link to=\"/resume-job\">Resume Job</Link>\n            </li>\n            <li>\n              <Link to=\"/control-panel\">Job Control Panel</Link>\n            </li>\n            <li>\n              <a href={`${process.env.NODE_ENV === 'production' ?\n                apiService.PRODUCTION_API_SERVER_BASE_URL :\n                apiService.developmentApiServerBaseUrl}/dashboard?token=${Authenticator.token}`}>Bull Job Queue Dashboard</a>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/resume-job\">\n            <ResumeJob />\n          </Route>\n          <Route path=\"/control-panel\">\n            <ControlPanelPage />\n          </Route>\n          <Route path=\"/k8s\">\n            <NodeScalingPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n"],"sourceRoot":""}