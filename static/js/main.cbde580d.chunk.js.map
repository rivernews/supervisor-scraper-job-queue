{"version":3,"sources":["components/renewal-job-form.module.css","components/login-form.module.css","App.module.css","pages/control-panel.module.css","components/renewal-job-types.tsx","utilities/formUtilities.ts","services/authenticate.ts","components/renewal-job-form.tsx","pages/resume-job.tsx","pages/home.tsx","services/appService.ts","components/login-form.tsx","pages/login.tsx","services/apiService.ts","pages/control-panel.page.tsx","pages/node-scaling.page.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["module","exports","ScraperMode","ScraperCrossRequest","props","orgId","orgName","lastProgress","lastReviewPage","scrapeMode","this","classFieldName","lastProgressValidateResult","ScraperProgress","validate","Object","keys","lastProgressKey","typeName","key","type","classField","valiateResult","_validate","getNestedValueFromName","values","name","split","mainField","reduce","acc","cur","Authenticate","_token","_port","loadValue","TOKEN_CACHE_KEY","PORT_CACHE_KEY","cacheKey","valueStoredLocally","localStorage","getItem","setItem","valueString","thisValue","locallyStoredValue","tokenString","setValue","getValue","portString","_singleton","Authenticator","singleton","inputList","initialValues","port","token","formSubmit","a","setSubmitting","fetch","window","location","href","startsWith","URLSearchParams","method","headers","body","JSON","stringify","res","status","json","alert","RenewalJobForm","className","styles","renewalForm","onSubmit","helpers","onReceiveResponse","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","unelevated","submitButton","disabled","map","inputMeta","index","field","label","input","onChange","onBlur","value","ResumeJob","useState","responseDisplay","setResponseDisplay","length","Home","AppContext","createContext","LoginForm","useContext","authCredentials","setAuthCredentials","tokenValue","trim","portValue","LoginFormField","SubmitButton","LoginPage","ApiSevice","PRODUCTION_API_SERVER_BASE_URL","asyncRequest","endpoint","logPrefix","POSTData","url","baseUrl","Error","statusText","asyncTerminateAllJobs","asyncResumeAllQueues","asyncPauseAllQueues","asyncStartS3Job","asyncCreateNode","size","asyncListNodes","scraperWorkerNodePools","nodePools","flatMap","np","nodes","asyncCleanNodes","asyncGetSeleniumMicroservice","asyncProvisionSeleniumMicroservice","provisionType","asyncDestroySeleniumMicroservice","DEVELOPMENT_API_SERVER_BASE_URL","apiService","ControlPanelPage","submitting","danger","onClick","NodeScalingPage","setNodes","disablePolling","setDisablePolling","nodeInstanceSize","setNodeInstanceSize","createNodeResponse","setCreateNodeResponse","deleteAllNodesResponse","setDeleteAllNodesResponse","listNodesResponse","setListNodesResponse","useEffect","polling","initialValue","event","target","NodeSizeSelector","apiRequestHandler","undefined","PollingToggleComponent","node","state","NodeScalingPanel","SeleniumMicroserviceScalingPanel","actionName","apiServiceFunction","setStateFunction","setResponseFunction","timestamp","Date","Array","isArray","resultObjects","apiServiceFunc","apiServiceFuncArgs","console","log","errorMessage","message","pollingScheduler","setInterval","clearInterval","disablePollingState","setDisablePollingState","seleniumMicroservice","setSeleniumMicroservice","provisionSeleniumHubResponse","setProvisionGetSeleniumHubResponse","provisionSeleniumChromeNodeResponse","setProvisionGetSeleniumChromeNodeResponse","destroySeleniumResponse","setDestroyGetSeleniumResponse","use","hubDeploymentResult","metadata","conditions","condition","serviceResult","spec","clusterIP","ports","chromeNodeDeploymentResult","Boolean","hostname","match","ReactDOM","render","routes","to","text","icon","Provider","App","r","i","tag","Link","pathname","stacked","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cbde580d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"renewalForm\":\"renewal-job-form_renewalForm__2a6rn\",\"field\":\"renewal-job-form_field__V5AVd\",\"input\":\"renewal-job-form_input__37mDi\",\"submitButton\":\"renewal-job-form_submitButton__3OXbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginFormField\":\"login-form_LoginFormField__28as_\",\"SubmitButton\":\"login-form_SubmitButton__38-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ControlPanelPage\":\"control-panel_ControlPanelPage__3J9xq\"};","export enum ScraperMode {\n    REGULAR = 'regular',\n    RENEWAL = 'renewal'\n}\n\nexport interface ScraperCrossRequestData {\n    orgId: string;\n    orgName: string;\n    lastProgress: ScraperProgressData;\n    lastReviewPage: string;\n    scrapeMode: ScraperMode;\n};\n\nexport class ScraperCrossRequest implements ScraperCrossRequestData {\n    public orgId: string;\n    public orgName: string;\n    public lastProgress: ScraperProgressData;\n    public lastReviewPage: string;\n    public scrapeMode: ScraperMode;\n\n    constructor (props: ScraperCrossRequestData) {\n        // ScraperCrossRequest.isScraperCrossRequestData(props);\n\n        this.orgId = props.orgId;\n        this.orgName = props.orgName;\n        this.lastProgress = props.lastProgress;\n        this.lastReviewPage = props.lastReviewPage;\n        this.scrapeMode = props.scrapeMode;\n    }\n\n    // type guard in Typescript\n    // https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\n    public static validate (\n        props: any,\n    ): { [key: string]: string } | void {\n\n        for (const classFieldName of ([\n            'orgId',\n            'orgName',\n            // 'lastProgress', // validate in its own logic later\n            'lastReviewPage',\n            'scrapeMode',\n        ] as Array<keyof ScraperCrossRequestData>)) {\n            if (!props[classFieldName]) {\n                return {\n                    [classFieldName]: 'required'\n                } as { [key in keyof ScraperCrossRequestData]: string };\n            }\n        }\n\n        const lastProgressValidateResult = ScraperProgress.validate(props.lastProgress);\n\n        if (lastProgressValidateResult) {\n            const [lastProgressKey,] = Object.keys(lastProgressValidateResult) as Array<keyof ScraperProgressData>;\n            return {\n                [`lastProgress.${lastProgressKey}`]: lastProgressValidateResult[lastProgressKey]\n            };\n        }\n\n        return;\n    }\n}\n\nexport interface ScraperProgressData {\n    // used in all cases\n    processed: number;\n    wentThrough: number;\n    total: number;\n\n    // used in FINISH and propogate back progress to schedule cross session job\n    durationInMilli: string;\n    page: number;\n    processedSession: number;\n}\n\nexport class ScraperProgress {\n    private static _validate(props: any,  classFieldName: keyof ScraperProgressData, typeName: 'number' | 'string'): { [key in keyof ScraperProgressData]: string } | void {\n        if (typeof props[classFieldName] !== typeName) {\n            return { [classFieldName]: 'required' } as { [key in keyof ScraperProgressData]: string };\n        }\n    }\n\n    public static validate (\n        props: any,\n    ) {\n        for (const classField of ([\n            { key: 'processed', type: 'number' },\n            { key: 'wentThrough', type: 'number' },\n            { key: 'total', type: 'number' },\n            { key: 'durationInMilli', type: 'string' },\n            { key: 'page', type: 'number' },\n            { key: 'processedSession', type: 'number' },\n        ] as Array<{ key: keyof ScraperProgressData, 'type': 'number' | 'string' }>)) {\n            const valiateResult = ScraperProgress._validate(props, classField.key, classField.type);\n\n            if (valiateResult) {\n                return valiateResult;\n            }\n        }\n\n        return;\n    }\n}\n","import { FormikValues } from 'formik';\n\nexport const getNestedValueFromName = (values: FormikValues, name: string) => {\n    const [mainField, ...subFields] = name.split('.');\n\n    return subFields.reduce((acc, cur) => {\n        if (!acc) {\n            return acc;\n        }\n        return acc[cur];\n    }, values[mainField]);\n}","class Authenticate {\n    private static _singleton: Authenticate;\n\n    private static TOKEN_CACHE_KEY = 'supervisor-scraper-job-queue:renewal-job-form:token';\n    private static PORT_CACHE_KEY = 'supervisor-scraper-job-queue:renewal-job-form:port';\n\n    private _token: string;\n    private _port: string;\n    \n    private constructor() {\n        this._token = this.loadValue(Authenticate.TOKEN_CACHE_KEY);\n        this._port = this.loadValue(Authenticate.PORT_CACHE_KEY);\n    }\n\n    private loadValue(cacheKey: string) {\n        const valueStoredLocally = localStorage.getItem(cacheKey);\n        if (valueStoredLocally !== null) {\n            return valueStoredLocally;\n        } else {\n            localStorage.setItem(Authenticate.TOKEN_CACHE_KEY, '');\n            return '';\n        }\n    }\n\n    static get singleton() {\n        if (!Authenticate._singleton) {\n            Authenticate._singleton = new Authenticate();\n        }\n        return Authenticate._singleton;\n    }\n\n    private setValue(valueString: string, cacheKey: string) {\n        localStorage.setItem(cacheKey, valueString);\n        return valueString;\n    }\n\n    private getValue(thisValue: string, cacheKey: string) {\n        if (thisValue && thisValue !== '') {\n            return thisValue;\n        }\n\n        const locallyStoredValue = localStorage.getItem(cacheKey);\n        if (locallyStoredValue !== null) {\n            return locallyStoredValue;\n        }\n\n        localStorage.setItem(cacheKey, '');\n        return '';\n    }\n\n    set token(tokenString: string) {\n        this._token = this.setValue(tokenString, Authenticate.TOKEN_CACHE_KEY);\n    }\n\n    get token() {\n        this._token = this.getValue(this._token, Authenticate.TOKEN_CACHE_KEY);\n        return this._token;\n    }\n\n    set port(portString: string) {\n        this._port = this.setValue(portString, Authenticate.PORT_CACHE_KEY);\n    }\n\n    get port() {\n        this._port = this.getValue(this._port, Authenticate.PORT_CACHE_KEY);\n        return this._port;\n    }\n}\n\nexport const Authenticator = Authenticate.singleton;\n","import React from \"react\";\nimport { Formik, FormikHelpers } from 'formik';\nimport { TextField } from \"@rmwc/textfield\";\nimport '@rmwc/textfield/styles';\nimport { Button } from \"@rmwc/button\";\nimport '@rmwc/button/styles';\n\nimport { ScraperCrossRequest } from \"./renewal-job-types\";\nimport { getNestedValueFromName } from \"../utilities/formUtilities\";\nimport styles from './renewal-job-form.module.css';\nimport { Authenticator } from \"../services/authenticate\";\n\nconst tokenCacheKey = 'supervisor-scraper-job-queue:renewal-job-form:token';\n\nconst inputList = [\n    { name: 'orgInfo', type: 'text' },\n    { name: 'orgId', type: 'text' },\n    { name: 'orgName', type: 'text' },\n    { name: 'lastProgress.processed', type: 'number' },\n    { name: 'lastProgress.wentThrough', type: 'number' },\n    { name: 'lastProgress.total', type: 'number' },\n    { name: 'lastProgress.durationInMilli', type: 'text' },\n    { name: 'lastProgress.page', type: 'number' },\n    { name: 'lastProgress.processedSession', type: 'number' },\n    { name: 'lastReviewPage', type: 'url' },\n\n    { name: 'port', type: 'text' },\n    { name: 'token', type: 'text' }\n]\n\nconst initialValues = {\n    'orgInfo': '',\n    'orgId': '1138',\n    'orgName': 'Apple',\n    'lastProgress': {\n        'processed': 4413,\n        'wentThrough': 4610,\n        'total': 15407,\n        'durationInMilli': '5430000',\n        'page': 461,\n        'processedSession': 3\n    },\n    'lastReviewPage': 'https://www.glassdoor.com/Reviews/Apple-Reviews-E1138_P461.htm',\n    'scrapeMode': 'renewal',\n    \n    'port': Authenticator.port,\n    'token': Authenticator.token\n}\n\nconst formSubmit = async (values: typeof initialValues, { setSubmitting }: FormikHelpers<typeof initialValues>) => {\n    const res = await fetch((window.location.href.startsWith('https') ?\n        `https://slack.api.shaungc.com/queues/single-org-renewal-job?` : \n        `http://localhost:${values.port}/queues/single-org-renewal-job?`) + new URLSearchParams({\n        'token': values.token\n    }), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values),\n    });\n\n    if (res.status === 200) {\n        const json = await res.json();\n\n        localStorage.setItem(tokenCacheKey, values.token);\n\n        setSubmitting(false);\n        return json;\n    } else {\n        alert('Submit failed!')\n        return res;\n    }\n}\n\n\n\nexport interface RenewalJobFormProps {\n    onReceiveResponse?: (res: any) => void\n}\n\n// https://jaredpalmer.com/formik/docs/overview\nexport const RenewalJobForm = (props: RenewalJobFormProps) => {\n    return <div className={styles.renewalForm}>\n        <h2>Create a New or Renewal Job</h2>\n\n        <Formik\n            initialValues={{\n                ...initialValues,\n                token: Authenticator.token,\n                port: Authenticator.port\n            }}\n            validate={values => {\n                const formValidateResult = ScraperCrossRequest.validate(values);\n                return formValidateResult;\n            }}\n            onSubmit={async (values: typeof initialValues, helpers: FormikHelpers<typeof initialValues>) => {\n                const res = await formSubmit(values, helpers);\n                props.onReceiveResponse && props.onReceiveResponse(res);\n            }}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                    <form onSubmit={handleSubmit}>\n                        <Button unelevated className={styles.submitButton} type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </Button>\n                        {inputList.map((inputMeta, index) => (\n                            <div\n                                key={index}\n                                className={styles.field}\n                            >\n                                <TextField\n                                    label={inputMeta.name}\n                                    className={styles.input}\n                                    type={inputMeta.type}\n                                    name={inputMeta.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={getNestedValueFromName(values, inputMeta.name)}\n                                />\n                                {getNestedValueFromName(errors, inputMeta.name) && getNestedValueFromName(touched, inputMeta.name) && getNestedValueFromName(errors, inputMeta.name)}\n                            </div>\n                        ))}\n                        <Button unelevated className={styles.submitButton} type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </Button>\n                    </form>\n                )}\n        </Formik>\n    </div>\n};\n","import React, { useState } from \"react\";\nimport { RenewalJobForm } from \"../components/renewal-job-form\";\n\nexport function ResumeJob() {\n    const [responseDisplay, setResponseDisplay] = useState({});\n\n    const onReceiveSubmitResponse = (res: any) => {\n        setResponseDisplay(res);\n    }\n\n    return <div>\n        {Object.keys(responseDisplay).length !== 0 && <div>\n            {JSON.stringify(responseDisplay, null, 4)}\n        </div>}\n        <RenewalJobForm onReceiveResponse={onReceiveSubmitResponse} />\n    </div>;\n}\n","\nimport React from \"react\";\n\nexport function Home() {\n    return (\n        <>\n            <h2>Home</h2>\n            <p>\n                This is the supervisor scraper frontend\n            </p>\n        </>\n    );\n}","// Context w/o default value\n\nimport { IAppContext } from \"../types/app.types\";\n\nimport { useContext, createContext } from \"react\";\n\n// https://fettblog.eu/typescript-react/context/#context-without-default-values\nexport const AppContext = createContext<Partial<IAppContext>>({});\n\nexport function useAppContext() {\n  return useContext(AppContext);\n};\n","import React from \"react\";\nimport { FormikHelpers, Formik } from \"formik\";\nimport { Button } from \"@rmwc/button\";\nimport '@rmwc/button/styles';\nimport { TextField } from \"@rmwc/textfield\";\nimport '@rmwc/textfield/styles';\n\nimport { getNestedValueFromName } from \"../utilities/formUtilities\";\nimport { Authenticator } from \"../services/authenticate\";\nimport { AuthCredentials } from \"../types/auth.types\";\nimport { useAppContext } from \"../services/appService\";\nimport styles from './login-form.module.css';\n\n\nconst inputList = [\n    { name: 'token', type: 'text' },\n    { name: 'port', type: 'text' },\n]\n\nexport const LoginForm = () => {\n    const { authCredentials, setAuthCredentials } = useAppContext();\n\n    const initialValues: AuthCredentials = authCredentials ? authCredentials : {\n        'token': Authenticator.token,\n        'port': Authenticator.port\n    };\n\n    // click handlers\n\n    const formSubmit = async (values: AuthCredentials, { setSubmitting }: FormikHelpers<AuthCredentials>) => {\n        const tokenValue = values.token.trim();\n        const portValue = values.port.trim();\n\n        if (tokenValue !== '') {\n            Authenticator.token = tokenValue;\n        }\n\n        if (portValue !== '') {\n            Authenticator.port = portValue;\n        }\n\n        alert('Credentials stored');\n\n        // store in React Context API\n        setAuthCredentials && setAuthCredentials({\n            token: tokenValue || '',\n            port: portValue || ''\n        });\n\n        setSubmitting(false);\n    }\n\n    return <div>\n        <Formik\n            initialValues={initialValues}\n            validate={() => { }}\n            onSubmit={formSubmit}\n        >\n            {({\n                values,\n                errors,\n                touched,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                /* and other goodies */\n            }) => (\n                    <form onSubmit={handleSubmit}>\n                        {inputList.map((inputMeta, index) => (\n                            <div\n                                key={index}\n                                className={styles.LoginFormField}\n                            >\n                                <TextField\n                                    label={inputMeta.name}\n                                    type={inputMeta.type}\n                                    name={inputMeta.name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={getNestedValueFromName(values, inputMeta.name)}\n                                />\n                                {getNestedValueFromName(errors, inputMeta.name) && getNestedValueFromName(touched, inputMeta.name) && getNestedValueFromName(errors, inputMeta.name)}\n                            </div>\n                        ))}\n                        <Button className={styles.SubmitButton} type=\"submit\" disabled={isSubmitting}>\n                            Store\n                        </Button>\n                    </form>\n                )}\n        </Formik>\n    </div>\n}\n","import React from \"react\";\nimport { LoginForm } from \"../components/login-form\";\n\n\nexport function LoginPage () {\n    return (<>\n        <h2>Login</h2>\n        <LoginForm />\n    </>)\n}","import { Authenticator } from \"./authenticate\";\nimport { KubernetesNodePool } from \"../types/k8s.types\";\n\nclass ApiSevice {\n    private static _singleton: ApiSevice;\n\n    public PRODUCTION_API_SERVER_BASE_URL = '//slack.api.shaungc.com';\n    private static DEVELOPMENT_API_SERVER_BASE_URL = '//localhost';\n\n    private constructor() {}\n\n    public static get singleton() {\n        if (!ApiSevice._singleton) {\n            ApiSevice._singleton = new ApiSevice();\n        }\n        return ApiSevice._singleton;\n    }\n\n    public get developmentApiServerBaseUrl() {\n        return `${ApiSevice.DEVELOPMENT_API_SERVER_BASE_URL}`\n    }\n\n    private get baseUrl () {\n        return process.env.NODE_ENV === 'production' ?\n            this.PRODUCTION_API_SERVER_BASE_URL :\n            `${this.developmentApiServerBaseUrl}:${Authenticator.port}`\n    }\n\n    private asyncRequest = async (endpoint: string, logPrefix: string, method: 'POST' | 'GET' | 'DELETE' = 'POST', POSTData?: {[key: string]: any}) => {\n        const url = `${this.baseUrl}${endpoint}?` + new URLSearchParams({\n            token: Authenticator.token\n        });\n\n        try {\n            const res = await fetch(\n                url, {\n                    method,\n                    ...(method === 'POST' && POSTData ? {\n                        body: JSON.stringify(POSTData)\n                    } : {}),\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }\n            );\n\n            if (res.status !== 200) {\n                throw new Error(`${logPrefix} request failed: ${res.status}, ${res.statusText}`);\n            } else {\n                return await res.json();\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public asyncTerminateAllJobs = () => {\n        return this.asyncRequest('/queues/terminate-all-jobs', 'Terminate all job');\n    }\n\n    public asyncResumeAllQueues = () => {\n        return this.asyncRequest('/queues/resume-all-queues', 'Resume all queues');\n    }\n\n    public asyncPauseAllQueues = () => {\n        return this.asyncRequest('/queues/pause-all-queues', 'Pause all queues');\n    }\n\n    public asyncStartS3Job = () => {\n        return this.asyncRequest(`/queues/s3-orgs-job`, 'Start S3 Job');\n    }\n\n    public asyncCreateNode = (size: string) => {\n        return this.asyncRequest(`/k8s/create-node`, `Create node`, 'POST', { size })\n    }\n\n    public asyncListNodes = async () => {\n        const res = await this.asyncRequest(`/k8s/list-node`, `List nodes`);\n        if (res.scraperWorkerNodePools) {\n            const nodePools = res.scraperWorkerNodePools as KubernetesNodePool[];\n            return nodePools.flatMap(np => np.nodes);\n        }\n\n        return [];\n    }\n\n    public asyncCleanNodes = () => {\n        return this.asyncRequest(`/k8s/clean-node`, `Clear all nodes`);\n    }\n\n    public asyncGetSeleniumMicroservice = () => {\n        return this.asyncRequest(`/k8s/selenium`, `Get selenium`, 'GET');\n    }\n\n    public asyncProvisionSeleniumMicroservice = (provisionType: string) => {\n        return this.asyncRequest(`/k8s/selenium`, `Provision selenium`, 'POST', { provisionType });\n    }\n\n    public asyncDestroySeleniumMicroservice = () => {\n        return this.asyncRequest(`/k8s/selenium`, `Destroy selenium`, 'DELETE');\n    }\n}\n\nexport const apiService = ApiSevice.singleton;\n","import React, { useState } from \"react\";\nimport { Button } from \"@rmwc/button\";\nimport '@rmwc/button/styles';\n\nimport { apiService } from \"../services/apiService\";\nimport styles from \"./control-panel.module.css\";\n\n\nexport function ControlPanelPage() {\n    const [submitting, setSubmitting] = useState(false);\n    return <div className={styles.ControlPanelPage}>\n        <h2>Control Panel</h2>\n\n        <Button danger unelevated disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncTerminateAllJobs();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Terminate All Jobs</Button>\n\n        <Button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncResumeAllQueues();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Resume All Jobs</Button>\n\n        <Button disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncPauseAllQueues();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert(JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Pause All Jobs</Button>\n\n        <Button unelevated disabled={submitting} type=\"button\" onClick={async () => {\n            setSubmitting(true);\n            try {\n                const res = await apiService.asyncStartS3Job();\n                alert(JSON.stringify(res));\n            } catch (error) {\n                alert('Error: ' + JSON.stringify(error));\n            }\n            setSubmitting(false);\n        }}>Start S3 Job</Button>\n\n    </div>\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Theme } from \"@rmwc/theme\";\nimport '@rmwc/theme/styles';\nimport { Button } from \"@rmwc/button\";\nimport '@rmwc/button/styles';\n\nimport { apiService } from \"../services/apiService\";\nimport { KubernetesNode, SeleniumMicroservice } from \"../types/k8s.types\";\n\nexport function NodeScalingPage() {\n    return (<>\n        {NodeScalingPanel()}\n\n        {SeleniumMicroserviceScalingPanel()}\n    </>)\n}\n\nconst apiRequestHandler = async (\n    actionName: string,\n    apiServiceFunction: (() => Promise<any>) | [(...args: any[]) => Promise<any>, ...any[]],\n    setStateFunction?: React.Dispatch<React.SetStateAction<any>>,\n    setResponseFunction?: React.Dispatch<React.SetStateAction<string>>,\n    setSubmitting?: (value: boolean) => void\n) => {\n    const timestamp = new Date();\n    setSubmitting && setSubmitting(true);\n    try {\n        let resultObjects: any;\n        if (!Array.isArray(apiServiceFunction)) {\n            resultObjects = await apiServiceFunction();\n        } else {\n            const [apiServiceFunc, ...apiServiceFuncArgs] = apiServiceFunction;\n            resultObjects = await apiServiceFunc(...apiServiceFuncArgs);\n        }\n        console.log(actionName, resultObjects);\n        setStateFunction && setStateFunction(resultObjects);\n        setResponseFunction && setResponseFunction(`${actionName} Status: OK ${JSON.stringify(resultObjects)} -- ${timestamp}`);\n    } catch (error) {\n        if (setResponseFunction) {\n            let errorMessage = '';\n            if (error instanceof Error) {\n                errorMessage = error.message;\n            } else {\n                errorMessage = JSON.stringify(error);\n            }\n\n            setResponseFunction(`Error: ` + errorMessage + ` -- ${timestamp}`);\n        }\n    } finally {\n        setSubmitting && setSubmitting(false);\n    }\n}\n\nconst polling = (\n    disabled: boolean,\n    actionName: string,\n    apiServiceFunction: () => Promise<any>,\n    setStateFunction?: React.Dispatch<React.SetStateAction<any>>,\n    setResponseFunction?: React.Dispatch<React.SetStateAction<string>>,\n    setSubmitting?: (value: boolean) => void,\n) => {\n    return () => {\n        if (disabled) {\n            return;\n        }\n\n        const pollingScheduler = setInterval(() => {\n            return apiRequestHandler(\n                actionName,\n                apiServiceFunction,\n                setStateFunction,\n                setResponseFunction,\n                setSubmitting\n            )\n        }, 5000)\n\n        // need to return a func for handling unmount\n        // https://upmostly.com/tutorials/setinterval-in-react-components-using-hooks\n        return () => clearInterval(pollingScheduler);\n    }\n}\n\n\nconst PollingToggleComponent = (\n    disablePollingState: boolean,\n    setDisablePollingState: React.Dispatch<React.SetStateAction<boolean>>\n) => {\n    return (<div>\n        <Button   onClick={() => setDisablePollingState(!disablePollingState)}>Toggle polling</Button >\n        <span>Polling is {disablePollingState ? 'off' : 'on'}</span>\n    </div>)\n}\n\n\nconst NodeSizeSelector = (initialValue: string, setNodeInstanceSize: React.Dispatch<React.SetStateAction<string>>) => {\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setNodeInstanceSize(event.target.value as string)\n    }\n\n    return (\n        <select onChange={handleOnChange} value={initialValue}>\n            <option value=\"MEDIUM\">Medium - 4G RAM, $20</option>\n            <option value=\"LARGE\">Large - 8G RAM, $40</option>\n            <option value=\"LARGE_16G\">Large - 6CPU/16G RAM, $80</option>\n            <option value=\"MEMORY_2CPU\">Memory Optimized - 2CPU/16G RAM, $75</option>\n            <option value=\"CPU_4CPU\">CPU Optimized - 4CPU/8G RAM, $80</option>\n            <option value=\"CPU_2CPU\">CPU Optimized - 2CPU/4G RAM, $40</option>\n        </select>\n    )\n}\n\n\nexport function NodeScalingPanel() {\n    const [submitting, setSubmitting] = useState(false);\n    const [nodes, setNodes] = useState<KubernetesNode[]>([]);\n    const [disablePolling, setDisablePolling] = useState(true);\n    const [nodeInstanceSize, setNodeInstanceSize] = useState<string>('MEDIUM');\n\n    const [createNodeResponse, setCreateNodeResponse] = useState('--');\n    const [deleteAllNodesResponse, setDeleteAllNodesResponse] = useState('--');\n    const [listNodesResponse, setListNodesResponse] = useState('--');\n\n    useEffect(polling(\n        disablePolling,\n        `ListNode`,\n        apiService.asyncListNodes,\n        setNodes,\n        setListNodesResponse,\n        setSubmitting\n    ), [disablePolling]);\n\n    // UI handler\n\n    const handleClickListNodes = () => {\n        return apiRequestHandler(\n            `ListNode`,\n            apiService.asyncListNodes,\n            setNodes,\n            setListNodesResponse,\n            setSubmitting\n        )\n    }\n\n    const handleClickCreateNode = () => {\n        return apiRequestHandler(\n            `CreateNode`,\n            [apiService.asyncCreateNode, nodeInstanceSize],\n            undefined,\n            setCreateNodeResponse,\n            setSubmitting\n        );\n    }\n\n    const handleClickDeleteNodes = () => {\n        return apiRequestHandler(\n            `DeleteNodes`,\n            apiService.asyncCleanNodes,\n            undefined,\n            setDeleteAllNodesResponse,\n            setSubmitting\n        );\n    }\n\n    return <>\n        <h2>Node Scaling</h2>\n        <div>\n            <div>{NodeSizeSelector(nodeInstanceSize, setNodeInstanceSize)}</div>\n            <Button unelevated disabled={submitting} type=\"button\" onClick={handleClickCreateNode}>Create node</Button >\n            <div>\n                {createNodeResponse}\n            </div>\n        </div>\n        <div>\n            <Button unelevated danger disabled={submitting} type=\"button\" onClick={handleClickDeleteNodes}>Delete all nodes</Button >\n            <div>\n                {deleteAllNodesResponse}\n            </div>\n        </div>\n\n\n        <h2>Node Status</h2>\n\n        {PollingToggleComponent(disablePolling, setDisablePolling)}\n\n        <Button   disabled={submitting} type=\"button\" onClick={handleClickListNodes}>List nodes</Button >\n        <div>\n            {listNodesResponse}\n        </div>\n\n        {nodes.length === 0 ? (<div>No scraper worker node.</div>) : nodes.map((node, index) => {\n            return !node ? (<div key={index}><h3>(Null)</h3> {JSON.stringify(node)}</div>) : (\n                <div key={index} >\n                    <h3>{node.name || '(No name)'}</h3>\n                    <div>State: {node.status ? node.status.state : JSON.stringify(node)}</div>\n                    <div><em>Payload: {JSON.stringify(node)}</em></div>\n                </div>\n            );\n        })}\n    </>\n}\n\nexport const SeleniumMicroserviceScalingPanel = () => {\n    const [submitting, setSubmitting] = useState(false);\n    const [seleniumMicroservice, setSeleniumMicroservice] = useState<SeleniumMicroservice | undefined>(undefined);\n    const [provisionSeleniumHubResponse, setProvisionGetSeleniumHubResponse] = useState('--');\n    const [provisionSeleniumChromeNodeResponse, setProvisionGetSeleniumChromeNodeResponse] = useState('--');\n    const [destroySeleniumResponse, setDestroyGetSeleniumResponse] = useState('--');\n    const [disablePolling, setDisablePolling] = useState(true);\n\n    useEffect(polling(\n        disablePolling,\n        `GetSelenium`,\n        apiService.asyncGetSeleniumMicroservice,\n        setSeleniumMicroservice,\n        undefined,\n        setSubmitting\n    ), [disablePolling]);\n\n    const handleClickGetSelenium = () => {\n        return apiRequestHandler(\n            `GetSelenium`,\n            apiService.asyncGetSeleniumMicroservice,\n            setSeleniumMicroservice,\n            undefined,\n            setSubmitting\n        );\n    };\n    const handleClickProvisionSeleniumHub = () => apiRequestHandler(\n        `ProvisionSeleniumHub`,\n        [apiService.asyncProvisionSeleniumMicroservice, 'hub'],\n        undefined,\n        setProvisionGetSeleniumHubResponse,\n        setSubmitting\n    );\n    const handleClickProvisionSeleniumChromeNode = () => apiRequestHandler(\n        `ProvisionSeleniumChromeNode`,\n        [apiService.asyncProvisionSeleniumMicroservice, 'chrome-node'],\n        undefined,\n        setProvisionGetSeleniumChromeNodeResponse,\n        setSubmitting\n    );\n    const handleClickDestroySelenium = () => apiRequestHandler(\n        `DestroySelenium`,\n        apiService.asyncDestroySeleniumMicroservice,\n        undefined,\n        setDestroyGetSeleniumResponse,\n        setSubmitting\n    );\n\n    return (<Theme use='surface'>\n        <h2>Selenium Microservices Scaling</h2>\n        <h3>Hub Provision</h3>\n\n        <Button unelevated disabled={submitting} onClick={handleClickProvisionSeleniumHub}>Provision selenium hub</Button >\n        <div>{provisionSeleniumHubResponse}</div>\n\n        <Button   disabled={submitting} onClick={handleClickProvisionSeleniumChromeNode}>Provision selenium chrome nodes</Button >\n        <div>{provisionSeleniumChromeNodeResponse}</div>\n\n        <Button danger disabled={submitting} onClick={handleClickDestroySelenium}>Destroy selenium</Button >\n        <div>{destroySeleniumResponse}</div>\n\n\n        <h3>Selenium Microservices Status</h3>\n\n        {PollingToggleComponent(disablePolling, setDisablePolling)}\n\n        <Button   disabled={submitting} onClick={handleClickGetSelenium}>Get selenium hub</Button >\n        {seleniumMicroservice ? (<div>\n\n            <h4>Hub Status</h4>\n            {seleniumMicroservice.hubDeploymentResult ? (<>\n                <h5>{seleniumMicroservice.hubDeploymentResult.body.metadata.name}</h5>\n                {seleniumMicroservice.hubDeploymentResult.body.status.conditions.map((condition, index) => (<div key={index}>\n                    <p>\n                        Status: {condition.type} - {condition.message}\n                    </p>\n                </div>))}\n            </>) : (<div>--</div>)}\n            {seleniumMicroservice.serviceResult ? (<>\n                <h3>{seleniumMicroservice.serviceResult.body.metadata.name}</h3>\n                <div>IP: {seleniumMicroservice.serviceResult.body.spec.clusterIP}</div>\n                <div>Port: {seleniumMicroservice.serviceResult.body.spec.ports.map(port => port.port)}</div>\n            </>) : (<div>--</div>)}\n\n            <h4>Chrome Node Status</h4>\n            {seleniumMicroservice.chromeNodeDeploymentResult ? (<>\n                <h5>{seleniumMicroservice.chromeNodeDeploymentResult.body.metadata.name}</h5>\n                {seleniumMicroservice.chromeNodeDeploymentResult.body.status.conditions.map((condition, index) => (<div key={index}>\n                    <p>\n                        Status: {condition.type} - {condition.message}\n                    </p>\n                </div>))}\n            </>) : (<div>--</div>)}\n        </div>) : (<div>--</div>)}\n    </Theme>);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { ResumeJob } from \"./pages/resume-job\";\nimport { TabBar, Tab } from \"@rmwc/tabs\";\nimport '@rmwc/tabs/styles';\nimport { RMWCProvider } from '@rmwc/provider';\n\nimport styles from './App.module.css';\nimport { Home } from \"./pages/home\";\nimport { LoginPage } from \"./pages/login\";\nimport { ControlPanelPage } from \"./pages/control-panel.page\";\nimport { apiService } from \"./services/apiService\";\nimport { NodeScalingPage } from \"./pages/node-scaling.page\";\nimport { AuthCredentials } from \"./types/auth.types\";\nimport { AppContext } from \"./services/appService\";\nimport { Authenticator } from \"./services/authenticate\";\n\n\nexport default function App() {\n  const [authCredentials, setAuthCredentials] = useState<AuthCredentials>({\n    token: Authenticator.token,\n    port: Authenticator.port\n  });\n\n  const routes = [{\n    to: '/', text: 'Home', icon: 'home'\n  }, {\n    to: '/login', text: 'Login', icon: 'account_circle'\n  }, {\n    to: '/resume-job', text: 'Create Job', icon: 'assignment'\n  }, {\n    to: '/k8s', text: 'Node Scaling', icon: 'cloud_upload'\n  }, {\n    to: '/control-panel', text: 'Queue Control', icon: 'build'\n  }, {\n    href: `${process.env.NODE_ENV === 'production' ?\n      apiService.PRODUCTION_API_SERVER_BASE_URL :\n      `${apiService.developmentApiServerBaseUrl}:${authCredentials.port}`}/dashboard?token=${authCredentials.token}`, text: 'Dashboard',\n    target: '_blank',\n    icon: 'open_in_new'\n  }]\n\n  return (\n    <RMWCProvider>\n      <AppContext.Provider value={{ authCredentials, setAuthCredentials }} >\n        <Router>\n          <div className={styles.App}>\n            <nav>\n              <TabBar>\n                {routes.map((r, i) => {\n                  return (\n                    <Tab key={i} tag={Link} to={r.href ? { pathname: r.href } : r.to}\n                      target={r.target}\n                      icon={r.icon}\n                      stacked\n                    >{r.text}</Tab>\n                  )\n                })}\n              </TabBar>\n            </nav>\n\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Switch>\n              <Route path=\"/resume-job\">\n                <ResumeJob />\n              </Route>\n              <Route path=\"/control-panel\">\n                <ControlPanelPage />\n              </Route>\n              <Route path=\"/k8s\">\n                <NodeScalingPage />\n              </Route>\n              <Route path=\"/login\">\n                <LoginPage />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </AppContext.Provider>\n    </RMWCProvider>\n  );\n}\n\n"],"sourceRoot":""}